/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ged;

import java.util.Iterator;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Comp
 */
public class EditClassDialog extends javax.swing.JDialog
{
  ClassElement editing_element;
  Attribute editing_attribute;
  Operation editing_operation;
  Parameter editing_parameter;
  DefaultTableModel attribute_table;
  DefaultTableModel operation_table;
  DefaultTableModel parameter_table;

  /**
   * Creates new form EditClassDialog
   * @param parent
   * @param modal
   */
  public EditClassDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();
    editing_element = null;
    editing_attribute = null;
    editing_operation = null;
    editing_parameter = null;
    attribute_table = (DefaultTableModel)ClassAttributeTable.getModel();
    operation_table = (DefaultTableModel)ClassOperationTable.getModel();
    parameter_table = (DefaultTableModel)OperationParameterTable.getModel();
    
    AttributeDlg.setVisible(false);
    OperationDlg.setVisible(false);
    ParameterDlg.setVisible(false);
  }
  
  public void editAttribute(Attribute editAttr)
  {
    if(editing_element != null && editAttr != null)
    {
      ClassAttributeStaticCheckbox.setSelected(editAttr.getStatic());
      Protection pLvl = editAttr.getProtectionLevel();
      if(pLvl == Protection.PROTECTED)
        ClassAttributeProtectedRadioBtn.setSelected(true);
      else if(pLvl == Protection.PRIVATE)
        ClassAttributePrivateRadioBtn.setSelected(true);
      else
        ClassAttributePublicRadioBtn.setSelected(true);
      ClassAttributeTypeField.setText(editAttr.getType());
      ClassAttributeNameField.setText(editAttr.getName());
      editing_attribute = editAttr;
      updateTables();
      AttributeDlg.setVisible(true);
    }
  }
  
  public void editOperation(Operation editOp)
  {
    if(editing_element != null && editOp != null)
    {
      OperationStaticCheckbox.setSelected(editOp.getStatic());
      Protection pLvl = editOp.getProtectionLevel();
      if(pLvl == Protection.PROTECTED)
        OperationProtectedRadioBtn.setSelected(true);
      else if(pLvl == Protection.PRIVATE)
        OperationPrivateRadioBtn.setSelected(true);
      else
        OperationPublicRadioBtn.setSelected(true);
      OperationReturnTypeField.setText(editOp.getReturnType());
      OperationNameField.setText(editOp.getName());
      editing_operation = editOp;
      updateTables();
      OperationDlg.setVisible(true);
    }
  }
  
  public void editParameter(Parameter editParam)
  {
    if(editing_operation != null && editParam != null)
    {
      ParameterTypeField.setText(editParam.getType());
      ParameterNameField.setText(editParam.getName());
      editing_parameter = editParam;
      updateTables();
      ParameterDlg.setVisible(true);
    }
  }
  
  public void open(ClassElement e)
  {
    if(e != null)
    {
      editing_element = e;
      updateTables();
      setVisible(true);
    }
  }
  
  public void updateTables()
  {
    clearTable(attribute_table);
    clearTable(operation_table);
    clearTable(parameter_table);
    
    if(editing_element != null)
    {
      ClassNameTextField.setText(editing_element.getName());

      if(editing_element.getInterface())
        ClassInterfaceCheckbox.setSelected(true);
      else
        ClassInterfaceCheckbox.setSelected(false);


      Iterator<Attribute> itAttr = editing_element.getAttributes().iterator();
      while(itAttr.hasNext())
      {
        Attribute a = itAttr.next();
        attribute_table.addRow(new String[]{a.getString()});
      }

      Iterator<Operation> itOp = editing_element.getOperations().iterator();
      while(itOp.hasNext())
      {
        Operation o = itOp.next();
        operation_table.addRow(new String[]{o.getString()});
      }

      if(editing_operation != null)
      {
        Iterator<Parameter> itPrm = editing_operation.getParameters().iterator();
        while(itPrm.hasNext())
        {
          Parameter p = itPrm.next();
          parameter_table.addRow(new String[]{p.getString()});
        }
      }
    }
  }
  
  private void clearTable(DefaultTableModel table)
  {
    int numRows = table.getRowCount();
    for(int i = numRows - 1; i >= 0; i--)
    {
      table.removeRow(i);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    AttributeDlg = new javax.swing.JDialog();
    EditAttributeLabel = new javax.swing.JLabel();
    ClassAttributeStaticCheckbox = new javax.swing.JCheckBox();
    ClassAttributePublicRadioBtn = new javax.swing.JRadioButton();
    ClassAttributeProtectedRadioBtn = new javax.swing.JRadioButton();
    ClassAttributePrivateRadioBtn = new javax.swing.JRadioButton();
    ClassAttributeTypeField = new javax.swing.JTextField();
    ClassAttributeTypeLabel = new javax.swing.JLabel();
    ClassAttributeNameField = new javax.swing.JTextField();
    ClassAttributeNameLabel = new javax.swing.JLabel();
    ClassAttributeOkBtn = new javax.swing.JButton();
    ProtectionButtonGroup = new javax.swing.ButtonGroup();
    OperationDlg = new javax.swing.JDialog();
    EditOperationLabel = new javax.swing.JLabel();
    OperationStaticCheckbox = new javax.swing.JCheckBox();
    OperationPublicRadioBtn = new javax.swing.JRadioButton();
    OperationProtectedRadioBtn = new javax.swing.JRadioButton();
    OperationPrivateRadioBtn = new javax.swing.JRadioButton();
    OperationReturnTypeField = new javax.swing.JTextField();
    OperationReturnTypeLabel = new javax.swing.JLabel();
    OperationNameField = new javax.swing.JTextField();
    OperationNameLabel = new javax.swing.JLabel();
    OperationOkBtn = new javax.swing.JButton();
    OperationParameterScrollPane = new javax.swing.JScrollPane();
    OperationParameterTable = new javax.swing.JTable();
    OperationParameterAddBtn = new javax.swing.JButton();
    OperationParameterDeleteBtn = new javax.swing.JButton();
    ParameterDlg = new javax.swing.JDialog();
    EditParameterLabel = new javax.swing.JLabel();
    ParameterTypeField = new javax.swing.JTextField();
    ParameterNameField = new javax.swing.JTextField();
    ParameterNameLabel = new javax.swing.JLabel();
    ParameterTypeLabel = new javax.swing.JLabel();
    ParameterOkBtn = new javax.swing.JButton();
    EditClassLabel = new javax.swing.JLabel();
    ClassNameLabel = new javax.swing.JLabel();
    ClassNameTextField = new javax.swing.JTextField();
    ClassAttributeScrollPane = new javax.swing.JScrollPane();
    ClassAttributeTable = new javax.swing.JTable();
    ClassAttributeAddBtn = new javax.swing.JButton();
    ClassAttributeDeleteBtn = new javax.swing.JButton();
    ClassOperationScrollPane = new javax.swing.JScrollPane();
    ClassOperationTable = new javax.swing.JTable();
    ClassOperationAddBtn = new javax.swing.JButton();
    ClassOperationDeleteBtn = new javax.swing.JButton();
    EditClassOkBtn = new javax.swing.JButton();
    ClassInterfaceCheckbox = new javax.swing.JCheckBox();

    AttributeDlg.setMinimumSize(new java.awt.Dimension(623, 411));
    AttributeDlg.setModal(true);

    EditAttributeLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    EditAttributeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    EditAttributeLabel.setText("Attribute");
    EditAttributeLabel.setToolTipText("");

    ClassAttributeStaticCheckbox.setText("Static");

    ProtectionButtonGroup.add(ClassAttributePublicRadioBtn);
    ClassAttributePublicRadioBtn.setText("Public");

    ProtectionButtonGroup.add(ClassAttributeProtectedRadioBtn);
    ClassAttributeProtectedRadioBtn.setText("Protected");

    ProtectionButtonGroup.add(ClassAttributePrivateRadioBtn);
    ClassAttributePrivateRadioBtn.setText("Private");

    ClassAttributeTypeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    ClassAttributeTypeLabel.setText("Type:");

    ClassAttributeNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    ClassAttributeNameLabel.setText("Name:");

    ClassAttributeOkBtn.setText("OK");
    ClassAttributeOkBtn.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        ClassAttributeOkBtnMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout AttributeDlgLayout = new javax.swing.GroupLayout(AttributeDlg.getContentPane());
    AttributeDlg.getContentPane().setLayout(AttributeDlgLayout);
    AttributeDlgLayout.setHorizontalGroup(
      AttributeDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(AttributeDlgLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(AttributeDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(EditAttributeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
          .addGroup(AttributeDlgLayout.createSequentialGroup()
            .addGroup(AttributeDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(ClassAttributeStaticCheckbox)
              .addGroup(AttributeDlgLayout.createSequentialGroup()
                .addComponent(ClassAttributePublicRadioBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ClassAttributeProtectedRadioBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ClassAttributePrivateRadioBtn)))
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(AttributeDlgLayout.createSequentialGroup()
            .addComponent(ClassAttributeTypeLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(ClassAttributeTypeField))
          .addGroup(AttributeDlgLayout.createSequentialGroup()
            .addComponent(ClassAttributeNameLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(ClassAttributeNameField))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AttributeDlgLayout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(ClassAttributeOkBtn))))
    );
    AttributeDlgLayout.setVerticalGroup(
      AttributeDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(AttributeDlgLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(EditAttributeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(ClassAttributeStaticCheckbox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(AttributeDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(ClassAttributePublicRadioBtn)
          .addComponent(ClassAttributeProtectedRadioBtn)
          .addComponent(ClassAttributePrivateRadioBtn))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(AttributeDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(ClassAttributeTypeLabel)
          .addComponent(ClassAttributeTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(AttributeDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(ClassAttributeNameLabel)
          .addComponent(ClassAttributeNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addComponent(ClassAttributeOkBtn)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    OperationDlg.setMinimumSize(new java.awt.Dimension(623, 500));
    OperationDlg.setModal(true);

    EditOperationLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    EditOperationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    EditOperationLabel.setText("Operation");
    EditOperationLabel.setToolTipText("");

    OperationStaticCheckbox.setText("Static");

    ProtectionButtonGroup.add(OperationPublicRadioBtn);
    OperationPublicRadioBtn.setText("Public");

    ProtectionButtonGroup.add(OperationProtectedRadioBtn);
    OperationProtectedRadioBtn.setText("Protected");

    ProtectionButtonGroup.add(OperationPrivateRadioBtn);
    OperationPrivateRadioBtn.setText("Private");

    OperationReturnTypeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    OperationReturnTypeLabel.setText("Return type:");

    OperationNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    OperationNameLabel.setText("Name:");

    OperationOkBtn.setText("OK");
    OperationOkBtn.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        OperationOkBtnMouseClicked(evt);
      }
    });

    OperationParameterTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Parameter"
      }
    )
    {
      boolean[] canEdit = new boolean []
      {
        false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    OperationParameterTable.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        OperationParameterTableMouseClicked(evt);
      }
    });
    OperationParameterScrollPane.setViewportView(OperationParameterTable);

    OperationParameterAddBtn.setText("Add");
    OperationParameterAddBtn.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        OperationParameterAddBtnMouseClicked(evt);
      }
    });

    OperationParameterDeleteBtn.setText("Delete");
    OperationParameterDeleteBtn.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        OperationParameterDeleteBtnMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout OperationDlgLayout = new javax.swing.GroupLayout(OperationDlg.getContentPane());
    OperationDlg.getContentPane().setLayout(OperationDlgLayout);
    OperationDlgLayout.setHorizontalGroup(
      OperationDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OperationDlgLayout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(OperationOkBtn)
        .addContainerGap())
      .addGroup(OperationDlgLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(OperationDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(EditOperationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
          .addGroup(OperationDlgLayout.createSequentialGroup()
            .addGroup(OperationDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(OperationStaticCheckbox)
              .addGroup(OperationDlgLayout.createSequentialGroup()
                .addComponent(OperationPublicRadioBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OperationProtectedRadioBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OperationPrivateRadioBtn)))
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(OperationDlgLayout.createSequentialGroup()
            .addComponent(OperationReturnTypeLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(OperationReturnTypeField))
          .addGroup(OperationDlgLayout.createSequentialGroup()
            .addComponent(OperationNameLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(OperationNameField))
          .addComponent(OperationParameterScrollPane)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OperationDlgLayout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(OperationParameterDeleteBtn)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(OperationParameterAddBtn))))
    );
    OperationDlgLayout.setVerticalGroup(
      OperationDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(OperationDlgLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(EditOperationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(OperationStaticCheckbox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(OperationDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(OperationPublicRadioBtn)
          .addComponent(OperationProtectedRadioBtn)
          .addComponent(OperationPrivateRadioBtn))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(OperationDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(OperationReturnTypeLabel)
          .addComponent(OperationReturnTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(OperationDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(OperationNameLabel)
          .addComponent(OperationNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addComponent(OperationParameterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(OperationDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(OperationParameterAddBtn)
          .addComponent(OperationParameterDeleteBtn))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
        .addComponent(OperationOkBtn)
        .addContainerGap())
    );

    ParameterDlg.setMinimumSize(new java.awt.Dimension(682, 188));
    ParameterDlg.setModal(true);

    EditParameterLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    EditParameterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    EditParameterLabel.setText("Parameter");
    EditParameterLabel.setToolTipText("");

    ParameterNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    ParameterNameLabel.setText("Name:");

    ParameterTypeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    ParameterTypeLabel.setText("Type:");

    ParameterOkBtn.setText("OK");
    ParameterOkBtn.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        ParameterOkBtnMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout ParameterDlgLayout = new javax.swing.GroupLayout(ParameterDlg.getContentPane());
    ParameterDlg.getContentPane().setLayout(ParameterDlgLayout);
    ParameterDlgLayout.setHorizontalGroup(
      ParameterDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(ParameterDlgLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(ParameterDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ParameterDlgLayout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(ParameterOkBtn))
          .addComponent(EditParameterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ParameterDlgLayout.createSequentialGroup()
            .addComponent(ParameterTypeLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(ParameterTypeField))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ParameterDlgLayout.createSequentialGroup()
            .addComponent(ParameterNameLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(ParameterNameField)))
        .addContainerGap())
    );
    ParameterDlgLayout.setVerticalGroup(
      ParameterDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(ParameterDlgLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(EditParameterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addGroup(ParameterDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(ParameterTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(ParameterTypeLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(ParameterDlgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(ParameterNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(ParameterNameLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(ParameterOkBtn)
        .addContainerGap(56, Short.MAX_VALUE))
    );

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setModal(true);

    EditClassLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    EditClassLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    EditClassLabel.setText("Edit Class");
    EditClassLabel.setToolTipText("");

    ClassNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    ClassNameLabel.setText("Name:");

    ClassNameTextField.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyReleased(java.awt.event.KeyEvent evt)
      {
        ClassNameTextFieldKeyReleased(evt);
      }
    });

    ClassAttributeTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Attributes"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    ClassAttributeTable.setRowSelectionAllowed(false);
    ClassAttributeTable.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        ClassAttributeTableMouseClicked(evt);
      }
    });
    ClassAttributeScrollPane.setViewportView(ClassAttributeTable);

    ClassAttributeAddBtn.setText("New Attribute");
    ClassAttributeAddBtn.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        ClassAttributeAddBtnMouseClicked(evt);
      }
    });

    ClassAttributeDeleteBtn.setText("Delete Attribute");
    ClassAttributeDeleteBtn.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        ClassAttributeDeleteBtnMouseClicked(evt);
      }
    });

    ClassOperationTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Operations"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    ClassOperationTable.setRowSelectionAllowed(false);
    ClassOperationTable.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        ClassOperationTableMouseClicked(evt);
      }
    });
    ClassOperationScrollPane.setViewportView(ClassOperationTable);

    ClassOperationAddBtn.setText("New Operation");
    ClassOperationAddBtn.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        ClassOperationAddBtnMouseClicked(evt);
      }
    });

    ClassOperationDeleteBtn.setText("Delete Operation");
    ClassOperationDeleteBtn.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        ClassOperationDeleteBtnMouseClicked(evt);
      }
    });

    EditClassOkBtn.setText("OK");
    EditClassOkBtn.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        EditClassOkBtnMouseClicked(evt);
      }
    });

    ClassInterfaceCheckbox.setText("Interface");
    ClassInterfaceCheckbox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        ClassInterfaceCheckboxActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(ClassOperationDeleteBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClassOperationAddBtn))
              .addComponent(EditClassOkBtn, javax.swing.GroupLayout.Alignment.TRAILING)))
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addComponent(ClassInterfaceCheckbox)
                .addGap(0, 0, Short.MAX_VALUE))
              .addComponent(EditClassLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addGroup(layout.createSequentialGroup()
                .addComponent(ClassNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClassNameTextField))
              .addComponent(ClassOperationScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(377, 377, 377)
                .addComponent(ClassAttributeDeleteBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClassAttributeAddBtn))
              .addComponent(ClassAttributeScrollPane))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(EditClassLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(ClassNameLabel)
          .addComponent(ClassNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(ClassInterfaceCheckbox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(ClassAttributeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
        .addGap(1, 1, 1)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(ClassAttributeAddBtn)
          .addComponent(ClassAttributeDeleteBtn))
        .addGap(13, 13, 13)
        .addComponent(ClassOperationScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(ClassOperationAddBtn)
          .addComponent(ClassOperationDeleteBtn))
        .addGap(18, 37, Short.MAX_VALUE)
        .addComponent(EditClassOkBtn)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void EditClassOkBtnMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_EditClassOkBtnMouseClicked
  {//GEN-HEADEREND:event_EditClassOkBtnMouseClicked
    setVisible(false);
  }//GEN-LAST:event_EditClassOkBtnMouseClicked

  private void ClassNameTextFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_ClassNameTextFieldKeyReleased
  {//GEN-HEADEREND:event_ClassNameTextFieldKeyReleased
    if(editing_element != null)
      editing_element.setName(ClassNameTextField.getText());
  }//GEN-LAST:event_ClassNameTextFieldKeyReleased

  private void ClassAttributeAddBtnMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_ClassAttributeAddBtnMouseClicked
  {//GEN-HEADEREND:event_ClassAttributeAddBtnMouseClicked
    if(editing_element != null)
    {
      Attribute newAttribute = new Attribute(Protection.PUBLIC, "", "");
      editAttribute(newAttribute);
      editing_element.addAttribute(newAttribute);
      updateTables();
    }
  }//GEN-LAST:event_ClassAttributeAddBtnMouseClicked

  private void ClassAttributeTableMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_ClassAttributeTableMouseClicked
  {//GEN-HEADEREND:event_ClassAttributeTableMouseClicked
    if(editing_element != null && evt.getClickCount() > 1)
    {
      int row = ClassAttributeTable.getSelectedRow();
      String attributeText = (String)ClassAttributeTable.getModel().
              getValueAt(row, 0);
      
      Iterator<Attribute> itAttr = editing_element.getAttributes().iterator();
      while(itAttr.hasNext())
      {
        Attribute a = itAttr.next();
        if(a.getString().equals(attributeText))
        {
          editAttribute(a);
        }
      }
    }
  }//GEN-LAST:event_ClassAttributeTableMouseClicked

  private void ClassAttributeOkBtnMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_ClassAttributeOkBtnMouseClicked
  {//GEN-HEADEREND:event_ClassAttributeOkBtnMouseClicked
    if(editing_element != null && editing_attribute != null)
    {
      boolean stc = ClassAttributeStaticCheckbox.isSelected();

      Protection pLvl = Protection.PUBLIC;
      if(ClassAttributeProtectedRadioBtn.isSelected())
      pLvl = Protection.PROTECTED;
      else if(ClassAttributePrivateRadioBtn.isSelected())
      pLvl = Protection.PRIVATE;

      String type = ClassAttributeTypeField.getText();
      String name = ClassAttributeNameField.getText();

      editing_attribute.setStatic(stc);
      editing_attribute.setProtectionLevel(pLvl);
      editing_attribute.setType(type);
      editing_attribute.setName(name);
    }

    AttributeDlg.setVisible(false);
    updateTables();
  }//GEN-LAST:event_ClassAttributeOkBtnMouseClicked

  private void OperationOkBtnMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_OperationOkBtnMouseClicked
  {//GEN-HEADEREND:event_OperationOkBtnMouseClicked
    if(editing_element != null && editing_operation != null)
    {
      boolean stc = OperationStaticCheckbox.isSelected();

      Protection pLvl = Protection.PUBLIC;
      if(OperationProtectedRadioBtn.isSelected())
      pLvl = Protection.PROTECTED;
      else if(OperationPrivateRadioBtn.isSelected())
      pLvl = Protection.PRIVATE;

      String type = OperationReturnTypeField.getText();
      String name = OperationNameField.getText();

      editing_operation.setStatic(stc);
      editing_operation.setProtectionLevel(pLvl);
      editing_operation.setReturnType(type);
      editing_operation.setName(name);
    }
    
    OperationDlg.setVisible(false);
    updateTables();
  }//GEN-LAST:event_OperationOkBtnMouseClicked

  private void ClassOperationAddBtnMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_ClassOperationAddBtnMouseClicked
  {//GEN-HEADEREND:event_ClassOperationAddBtnMouseClicked
    if(editing_element != null)
    {
      Operation newOperation = new Operation(Protection.PUBLIC, "", "");
      editOperation(newOperation);
      editing_element.addOperation(newOperation);
      updateTables();
    }
  }//GEN-LAST:event_ClassOperationAddBtnMouseClicked

  private void ClassOperationDeleteBtnMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_ClassOperationDeleteBtnMouseClicked
  {//GEN-HEADEREND:event_ClassOperationDeleteBtnMouseClicked
    if(editing_element != null)
    {
      int row = ClassOperationTable.getSelectedRow();
      String operationText = (String)ClassOperationTable.getModel().
              getValueAt(row, 0);
      Iterator<Operation> itOp = editing_element.getOperations().iterator();
      while(itOp.hasNext())
      {
        Operation o = itOp.next();
        String oText = o.getString();
        if(oText.equals(operationText))
        {
          editing_element.deleteOperation(o);
          updateTables();
          break;
        }
      }
    }
  }//GEN-LAST:event_ClassOperationDeleteBtnMouseClicked

  private void ClassAttributeDeleteBtnMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_ClassAttributeDeleteBtnMouseClicked
  {//GEN-HEADEREND:event_ClassAttributeDeleteBtnMouseClicked
    if(editing_element != null)
    {
      int row = ClassAttributeTable.getSelectedRow();
      String attributeText = (String)ClassAttributeTable.getModel().
              getValueAt(row, 0);
      Iterator<Attribute> itAttr = editing_element.getAttributes().iterator();
      while(itAttr.hasNext())
      {
        Attribute a = itAttr.next();
        String aText = a.getString();
        if(aText.equals(attributeText))
        {
          editing_element.deleteAttribute(a);
          updateTables();
          break;
        }
      }
    }
  }//GEN-LAST:event_ClassAttributeDeleteBtnMouseClicked

  private void ClassOperationTableMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_ClassOperationTableMouseClicked
  {//GEN-HEADEREND:event_ClassOperationTableMouseClicked
    if(editing_element != null && evt.getClickCount() > 1)
    {
      int row = ClassOperationTable.getSelectedRow();
      String opText = (String)ClassOperationTable.getModel().
              getValueAt(row, 0);
      
      Iterator<Operation> itOp = editing_element.getOperations().iterator();
      while(itOp.hasNext())
      {
        Operation o = itOp.next();
        if(o.getString().equals(opText))
        {
          editOperation(o);
          break;
        }
      }
    }
  }//GEN-LAST:event_ClassOperationTableMouseClicked

  private void ParameterOkBtnMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_ParameterOkBtnMouseClicked
  {//GEN-HEADEREND:event_ParameterOkBtnMouseClicked
    if(editing_operation != null && editing_parameter != null)
    {
      String type = ParameterTypeField.getText();
      String name = ParameterNameField.getText();

      editing_parameter.setType(type);
      editing_parameter.setName(name);
    }
    
    ParameterDlg.setVisible(false);
    updateTables();
  }//GEN-LAST:event_ParameterOkBtnMouseClicked

  private void OperationParameterDeleteBtnMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_OperationParameterDeleteBtnMouseClicked
  {//GEN-HEADEREND:event_OperationParameterDeleteBtnMouseClicked
    if(editing_operation != null)
    {
      int row = OperationParameterTable.getSelectedRow();
      String paramText = (String)OperationParameterTable.getModel().
              getValueAt(row, 0);
      Iterator<Parameter> itPrm = editing_operation.getParameters().iterator();
      while(itPrm.hasNext())
      {
        Parameter p = itPrm.next();
        String pText = p.getString();
        if(pText.equals(paramText))
        {
          editing_operation.deleteParameter(p);
          updateTables();
          break;
        }
      }
    }
  }//GEN-LAST:event_OperationParameterDeleteBtnMouseClicked

  private void OperationParameterAddBtnMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_OperationParameterAddBtnMouseClicked
  {//GEN-HEADEREND:event_OperationParameterAddBtnMouseClicked
    if(editing_operation != null)
    {
      Parameter newParameter = new Parameter("", "");
      editParameter(newParameter);
      editing_operation.addParameter(newParameter);
      updateTables();
    }
  }//GEN-LAST:event_OperationParameterAddBtnMouseClicked

  private void OperationParameterTableMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_OperationParameterTableMouseClicked
  {//GEN-HEADEREND:event_OperationParameterTableMouseClicked
    if(editing_operation != null && evt.getClickCount() > 1)
    {
      int row = OperationParameterTable.getSelectedRow();
      String paramText = (String)OperationParameterTable.getModel().
              getValueAt(row, 0);
      
      Iterator<Parameter> itPrm = editing_operation.getParameters().iterator();
      while(itPrm.hasNext())
      {
        Parameter p = itPrm.next();
        if(p.getString().equals(paramText))
        {
          editParameter(p);
        }
      }
    }
  }//GEN-LAST:event_OperationParameterTableMouseClicked

  private void ClassInterfaceCheckboxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ClassInterfaceCheckboxActionPerformed
  {//GEN-HEADEREND:event_ClassInterfaceCheckboxActionPerformed
    if(editing_element != null)
    {
      editing_element.setInterface(ClassInterfaceCheckbox.isSelected());
    }
  }//GEN-LAST:event_ClassInterfaceCheckboxActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(EditClassDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
        //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      @Override
      public void run()
      {
        EditClassDialog dialog = new EditClassDialog(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JDialog AttributeDlg;
  private javax.swing.JButton ClassAttributeAddBtn;
  private javax.swing.JButton ClassAttributeDeleteBtn;
  private javax.swing.JTextField ClassAttributeNameField;
  private javax.swing.JLabel ClassAttributeNameLabel;
  private javax.swing.JButton ClassAttributeOkBtn;
  private javax.swing.JRadioButton ClassAttributePrivateRadioBtn;
  private javax.swing.JRadioButton ClassAttributeProtectedRadioBtn;
  private javax.swing.JRadioButton ClassAttributePublicRadioBtn;
  private javax.swing.JScrollPane ClassAttributeScrollPane;
  private javax.swing.JCheckBox ClassAttributeStaticCheckbox;
  private javax.swing.JTable ClassAttributeTable;
  private javax.swing.JTextField ClassAttributeTypeField;
  private javax.swing.JLabel ClassAttributeTypeLabel;
  private javax.swing.JCheckBox ClassInterfaceCheckbox;
  private javax.swing.JLabel ClassNameLabel;
  private javax.swing.JTextField ClassNameTextField;
  private javax.swing.JButton ClassOperationAddBtn;
  private javax.swing.JButton ClassOperationDeleteBtn;
  private javax.swing.JScrollPane ClassOperationScrollPane;
  private javax.swing.JTable ClassOperationTable;
  private javax.swing.JLabel EditAttributeLabel;
  private javax.swing.JLabel EditClassLabel;
  private javax.swing.JButton EditClassOkBtn;
  private javax.swing.JLabel EditOperationLabel;
  private javax.swing.JLabel EditParameterLabel;
  private javax.swing.JDialog OperationDlg;
  private javax.swing.JTextField OperationNameField;
  private javax.swing.JLabel OperationNameLabel;
  private javax.swing.JButton OperationOkBtn;
  private javax.swing.JButton OperationParameterAddBtn;
  private javax.swing.JButton OperationParameterDeleteBtn;
  private javax.swing.JScrollPane OperationParameterScrollPane;
  private javax.swing.JTable OperationParameterTable;
  private javax.swing.JRadioButton OperationPrivateRadioBtn;
  private javax.swing.JRadioButton OperationProtectedRadioBtn;
  private javax.swing.JRadioButton OperationPublicRadioBtn;
  private javax.swing.JTextField OperationReturnTypeField;
  private javax.swing.JLabel OperationReturnTypeLabel;
  private javax.swing.JCheckBox OperationStaticCheckbox;
  private javax.swing.JDialog ParameterDlg;
  private javax.swing.JTextField ParameterNameField;
  private javax.swing.JLabel ParameterNameLabel;
  private javax.swing.JButton ParameterOkBtn;
  private javax.swing.JTextField ParameterTypeField;
  private javax.swing.JLabel ParameterTypeLabel;
  private javax.swing.ButtonGroup ProtectionButtonGroup;
  // End of variables declaration//GEN-END:variables
}
